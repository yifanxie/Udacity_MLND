1
00:00:00,310 --> 00:00:02,070
All right Charles let's see what you think.

2
00:00:02,070 --> 00:00:04,300
>> The first one says we want to have

3
00:00:04,300 --> 00:00:07,100
a fixed number of clusters. Well actually the first thing

4
00:00:07,100 --> 00:00:08,240
I'll note about that, since we're going to have a

5
00:00:08,240 --> 00:00:10,770
fixed number of clusters in doesn't have the richness property.

6
00:00:10,770 --> 00:00:11,390
>> Good point.

7
00:00:11,390 --> 00:00:13,890
>> Because richness would allow for one cluster or it could have

8
00:00:13,890 --> 00:00:16,350
n clusters or it could have n over three clusters or it

9
00:00:16,350 --> 00:00:18,670
could have n over two clusters. But here you forced it to

10
00:00:18,670 --> 00:00:22,270
always have n over two clusters so it can't represent all possible clusters.

11
00:00:22,270 --> 00:00:23,280
>> Agreed.

12
00:00:23,280 --> 00:00:25,550
>> However, you'll notice that there's nothing

13
00:00:25,550 --> 00:00:28,090
in here that cares about distances. In the sense

14
00:00:28,090 --> 00:00:30,220
that, if I took all of the coints, and

15
00:00:30,220 --> 00:00:32,910
I multiplied their distances by two, I would still

16
00:00:32,910 --> 00:00:35,470
get the same clusters in exactly the same order.

17
00:00:35,470 --> 00:00:37,860
>> That's the important thing. That it cares about distancees

18
00:00:37,860 --> 00:00:39,900
but it only cares about the order not the scale.

19
00:00:39,900 --> 00:00:41,807
>> Exactly. So that means there's scale-invariance.

20
00:00:41,807 --> 00:00:42,180
>> Very good.

21
00:00:42,180 --> 00:00:46,390
>> And then by the same argument, this algorithm has consistency because the

22
00:00:46,390 --> 00:00:48,720
points that were, clustered together if they

23
00:00:48,720 --> 00:00:50,560
got closer together, they would still be

24
00:00:50,560 --> 00:00:54,150
picked up. And the ones that were farther apart, well, they'd still get

25
00:00:54,150 --> 00:00:55,280
picked up by each other and it,

26
00:00:55,280 --> 00:00:57,270
it doesn't matter. So they're definitely consistent.

27
00:00:57,270 --> 00:00:59,465
>> That's right. And it's a nice little property of

28
00:00:59,465 --> 00:01:02,530
single-link clustering. Let's move on to the second clustering algorithm.

29
00:01:02,530 --> 00:01:05,550
>> Nice. Okay so clusters that are theta units

30
00:01:05,550 --> 00:01:10,150
apart, well, since theta can change, even if theta's

31
00:01:10,150 --> 00:01:12,870
fixed the, the points that I get. Could be

32
00:01:12,870 --> 00:01:15,620
various kinds of distances. So, let's imagine that theta

33
00:01:15,620 --> 00:01:17,990
was ten feet. If all the points are within ten

34
00:01:17,990 --> 00:01:20,350
feet of one another, then they would be one cluster.

35
00:01:20,350 --> 00:01:21,010
>> Yup.

36
00:01:21,010 --> 00:01:22,600
>> If on the other hand, all the

37
00:01:22,600 --> 00:01:25,030
points were more than ten feet apart, you would

38
00:01:25,030 --> 00:01:27,180
have N different clusters. And, you could do

39
00:01:27,180 --> 00:01:29,810
any of them in between. So, this is rich.

40
00:01:29,810 --> 00:01:32,300
>> It is indeed. That's right. We can always

41
00:01:32,300 --> 00:01:34,360
muck with the units. Or muck with theta for

42
00:01:34,360 --> 00:01:36,470
that matter. So, that we can group the beginning

43
00:01:36,470 --> 00:01:38,580
of our clusters in any. Accommodation that we want.

44
00:01:38,580 --> 00:01:40,760
>> Yeah, but for exactly the same argument that they're

45
00:01:40,760 --> 00:01:42,860
rich, they're not scale invariant.

46
00:01:42,860 --> 00:01:43,790
>> Yeah.

47
00:01:43,790 --> 00:01:46,320
>> Because I could just take everything and multiply it by theta,

48
00:01:46,320 --> 00:01:48,630
multiply it by the distance by theta and now I will suddenly have

49
00:01:48,630 --> 00:01:51,410
n then if I had n to begin with, I could divide

50
00:01:51,410 --> 00:01:54,940
by theta, and then I would have one. So it's not scale invariant.

51
00:01:54,940 --> 00:01:55,800
>> Agreed.

52
00:01:55,800 --> 00:01:58,100
>> But the consistency argument still works, because all the

53
00:01:58,100 --> 00:02:01,410
points that got clustered together. Because they're within theta of each

54
00:02:01,410 --> 00:02:03,590
other. If I made them closer, would still be within

55
00:02:03,590 --> 00:02:06,250
theta of each other. And the ones that weren't closer together

56
00:02:06,250 --> 00:02:08,530
because they were more than theta apart, would now be

57
00:02:08,530 --> 00:02:11,350
even more theta apart and so you do get consistency.

58
00:02:11,350 --> 00:02:12,650
>> Agreed.

59
00:02:12,650 --> 00:02:13,840
>> Excellent. Ok.

60
00:02:13,840 --> 00:02:15,590
>> Alright, last example.

61
00:02:15,590 --> 00:02:17,760
>> Clusters that are Theta W units apart

62
00:02:17,760 --> 00:02:21,380
where. I'm sorry, Theta Omega units apart. [LAUGH]

63
00:02:21,380 --> 00:02:23,020
>> Theta divided by Omega.

64
00:02:23,020 --> 00:02:23,260
>> Yeah.

65
00:02:23,260 --> 00:02:28,010
>> Where Omega equals the maximum distance. Well, that's just

66
00:02:28,010 --> 00:02:31,380
a way of normalizing distance. In much the same way

67
00:02:31,380 --> 00:02:33,790
that I argued for richness of the

68
00:02:33,790 --> 00:02:35,940
second algorithm, the same argument applies here.

69
00:02:35,940 --> 00:02:37,150
>> That it is rich.

70
00:02:37,150 --> 00:02:39,670
>> It is rich, because I can just keep shrinking and moving the

71
00:02:39,670 --> 00:02:42,990
points around, and it will work out just fine. And so, it's definitely rich.

72
00:02:42,990 --> 00:02:46,050
>> We don't control omega, because that's determined

73
00:02:46,050 --> 00:02:47,750
by the distances, but we can change the

74
00:02:47,750 --> 00:02:50,440
theta so that things are too close or too far. Yeah, okay, I agree with that.

75
00:02:50,440 --> 00:02:52,440
>> That's sort of the last thing you said for the

76
00:02:52,440 --> 00:02:56,600
second algorithm too. So you do get richness. Now, what's interesting

77
00:02:56,600 --> 00:03:00,550
to me here is that unlike in the second algorithm where you didn't have

78
00:03:00,550 --> 00:03:03,990
scale and variance, you do get scale and variance here because if I try to

79
00:03:03,990 --> 00:03:05,910
make things bigger. I'm also going to

80
00:03:05,910 --> 00:03:08,480
make the maximum distance bigger by exactly

81
00:03:08,480 --> 00:03:12,790
the same amount and so I will always end up back where I was before.

82
00:03:12,790 --> 00:03:14,370
>> Yeah. So whatever you do to scale

83
00:03:14,370 --> 00:03:17,140
this, it's going to get undone. Yeah. Very good.

84
00:03:17,140 --> 00:03:18,840
>> Right. Exactly. Anything I do to make it, make

85
00:03:18,840 --> 00:03:21,760
them far apart will just make them the same distance.

86
00:03:21,760 --> 00:03:22,610
But at least by omega.

87
00:03:22,610 --> 00:03:26,220
>> Agreed. Okay. And, and if we have consistency too, we've got a trifecta.

88
00:03:26,220 --> 00:03:28,290
>> We do, except, we don't have consistency.

89
00:03:28,290 --> 00:03:28,770
>> What?

90
00:03:28,770 --> 00:03:30,910
>> Because if I make the, the clusters that

91
00:03:30,910 --> 00:03:33,630
are farther apart, farther apart, then I also change omega.

92
00:03:33,630 --> 00:03:35,480
>> And that could actually change the cluster.

93
00:03:35,480 --> 00:03:37,450
>> It would because, in fact, imagine that I made the

94
00:03:37,450 --> 00:03:40,580
points in a set of clusters. Much closer together, but then

95
00:03:40,580 --> 00:03:43,250
I move that cluster, you know, sort of infinitely far apart

96
00:03:43,250 --> 00:03:47,290
from the rest of the clusters. Then, suddenly my theta divided by

97
00:03:47,290 --> 00:03:50,070
infinity, or near infinity, would make the, the

98
00:03:50,070 --> 00:03:52,760
radius of allowable clusters so small that no

99
00:03:52,760 --> 00:03:55,980
points would be able to cluster with any other point. And so that would screw up

100
00:03:55,980 --> 00:03:58,030
whatever you had before, assuming you had clusters

101
00:03:58,030 --> 00:04:00,080
before at all. And so, I can construct

102
00:04:00,080 --> 00:04:01,880
a world where consistency would be wrong. Oh

103
00:04:01,880 --> 00:04:03,520
that's nice, it made a little diagonal of X's.

104
00:04:03,520 --> 00:04:05,940
>> [LAUGH] And I win, three in a row.

105
00:04:05,940 --> 00:04:09,290
>> Well done Michael. So, what little tweak do we

106
00:04:09,290 --> 00:04:11,950
have to do to these algorithms to get a trifecta?

107
00:04:11,950 --> 00:04:12,690
>> Yeah,

108
00:04:12,690 --> 00:04:13,850
that would be great, wouldn't it? And

109
00:04:13,850 --> 00:04:15,680
that's the final algorithm that we'll talk about.

110
00:04:15,680 --> 00:04:15,960
>> Great.

