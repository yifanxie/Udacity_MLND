1
00:00:00,100 --> 00:00:00,820
All right. What you got?

2
00:00:00,820 --> 00:00:03,740
>> So I look at this and believe it or not

3
00:00:03,740 --> 00:00:07,440
I, I came to an answer by two completely different ways.

4
00:00:07,440 --> 00:00:10,680
>> Okay. And do they, do they agree?

5
00:00:10,680 --> 00:00:12,510
>> They, they happen to agree, but one of them

6
00:00:12,510 --> 00:00:14,160
is kind of lame. It's sort of the thing that you

7
00:00:14,160 --> 00:00:17,190
would do if you were doing the SAT or the GRE

8
00:00:17,190 --> 00:00:19,690
and you wanted to quickly get a guess at the answer.

9
00:00:19,690 --> 00:00:20,168
>> Oh, I see.

10
00:00:20,168 --> 00:00:25,810
>> And it's that k, very small k and very big k are kind of both easy.

11
00:00:25,810 --> 00:00:27,641
It's the one in the middle where it gets hard. And

12
00:00:27,641 --> 00:00:30,790
so any function that depends on k directly, in a way

13
00:00:30,790 --> 00:00:33,403
where as k gets bigger it gets harder, as k gets

14
00:00:33,403 --> 00:00:37,420
smaller, it gets easier, is probably not right. Which made me think

15
00:00:37,420 --> 00:00:39,918
was probably n cubed. And so then I tried to think

16
00:00:39,918 --> 00:00:42,848
about how the algorithm worked. And so, the worst case way

17
00:00:42,848 --> 00:00:45,739
of thinking about the algorithm is at every single time you

18
00:00:45,739 --> 00:00:48,900
have to figure out which two points are closest to one another.

19
00:00:48,900 --> 00:00:50,810
>> Alright, hang on a sec. So we're going

20
00:00:50,810 --> 00:00:57,230
to repeat k times, and the hard case is when it's, like, n over twoish, right?

21
00:00:57,230 --> 00:00:58,420
>> Right.

22
00:00:58,420 --> 00:01:00,930
>> And what, what is it that we do at each step?

23
00:01:00,930 --> 00:01:02,930
>> Well, we find the two closest points.

24
00:01:02,930 --> 00:01:04,069
>> Good.

25
00:01:04,069 --> 00:01:06,220
>> Right, and that, and how long, and yeah, and how

26
00:01:06,220 --> 00:01:08,970
long does that take, it's exactly, it's n squared. because you have

27
00:01:08,970 --> 00:01:11,694
to do all possible combinations. It's a little better than n

28
00:01:11,694 --> 00:01:15,020
squared, right, it's, you know, but it's big O of n squared.

29
00:01:15,020 --> 00:01:15,850
>> Right, and it's possible

30
00:01:15,850 --> 00:01:18,690
that if we store those distances really cleverly we can get it down a

31
00:01:18,690 --> 00:01:22,600
bit more, but, yeah, n squared seems like a nice way to characterize it. So

32
00:01:22,600 --> 00:01:26,360
don't we need to do some work to merge the clusters together so that

33
00:01:26,360 --> 00:01:27,490
the next time through we get the

34
00:01:27,490 --> 00:01:29,590
right set of distances that we're looking through.

35
00:01:29,590 --> 00:01:32,510
>> We could do that and that would work fine and

36
00:01:32,510 --> 00:01:35,960
that's probably the right thing to do, but just kind of

37
00:01:35,960 --> 00:01:38,580
at a high level, what you just really want to do

38
00:01:38,580 --> 00:01:40,920
is, you just want to find the closest two points that have

39
00:01:40,920 --> 00:01:41,750
two different labels.

40
00:01:41,750 --> 00:01:42,620
>> Okay.

41
00:01:42,620 --> 00:01:45,290
>> So what I associate with every, with every

42
00:01:45,290 --> 00:01:47,660
object x is the label that it currently has.

43
00:01:47,660 --> 00:01:51,070
>> So you're going to look at each pair. Ignore it if the, the labels

44
00:01:51,070 --> 00:01:54,450
are the same, on both of the clusters that the two objects are in.

45
00:01:54,450 --> 00:01:55,153
>> Mm-hm.

46
00:01:55,153 --> 00:01:56,500
>> And otherwise find the minimum.

47
00:01:56,500 --> 00:01:58,370
>> Right. And what, and I can.

48
00:01:58,370 --> 00:01:58,840
>> That sort of works.

49
00:01:58,840 --> 00:02:02,170
>> And I could do that in time linear in the number of pairs.

50
00:02:02,170 --> 00:02:05,200
So it's still n squared, I don't have to sort or anything like that.

51
00:02:05,200 --> 00:02:05,900
>> True, though we could,

52
00:02:05,900 --> 00:02:07,290
it could be a little bit smarter to not

53
00:02:07,290 --> 00:02:09,690
reconsider the same pairs over and over and over again.

54
00:02:09,690 --> 00:02:12,380
>> That's right, you could. If you could

55
00:02:12,380 --> 00:02:14,295
use, you could probably use something fancy like

56
00:02:14,295 --> 00:02:19,440
Fibonacci heaps, or hash tables or something. And

57
00:02:19,440 --> 00:02:20,720
in fact, I know that there are people

58
00:02:20,720 --> 00:02:23,140
who've gotten entire PhDs on clever ways of

59
00:02:23,140 --> 00:02:25,650
doing this without having to consider all points.

60
00:02:25,650 --> 00:02:29,640
By dividing points up into little boxes where

61
00:02:29,640 --> 00:02:31,280
things tend to be closer to one another.

62
00:02:31,280 --> 00:02:32,900
Actually looks a lot, very hierarchical as well.

63
00:02:32,900 --> 00:02:33,560
>> Fair enough.

64
00:02:33,560 --> 00:02:36,960
>> Okay, so we do, we do, we do a, that

65
00:02:36,960 --> 00:02:41,062
takes n squared time. How many times do we do a?

66
00:02:41,062 --> 00:02:42,190
>> Well, we do it about n times.

67
00:02:42,190 --> 00:02:44,050
>> Alright. So that gets us the n cubed.

68
00:02:44,050 --> 00:02:45,090
And is it, is it clear that the other

69
00:02:45,090 --> 00:02:46,730
ones are definitely wrong? Well, since we can do

70
00:02:46,730 --> 00:02:48,980
this in n squared time, and the number of

71
00:02:48,980 --> 00:02:50,750
clusters can be large, the first one is a

72
00:02:50,750 --> 00:02:52,970
bad answer. The second one is a bad answer.

73
00:02:52,970 --> 00:02:54,540
How about the last one? Is it, is it

74
00:02:54,540 --> 00:02:56,500
possible that we could actually do this in linear time?

75
00:02:58,700 --> 00:03:03,135
no. Well, for, for, for very small or very big k, maybe. Like, so k equals

76
00:03:03,135 --> 00:03:06,760
2, yes, that's easy, that's linear, k equals

77
00:03:06,760 --> 00:03:09,090
n, that's easy. because we started out that way.

78
00:03:09,090 --> 00:03:11,690
>> I see, but for in between k's.

79
00:03:11,690 --> 00:03:12,990
>> because you still have to find

80
00:03:12,990 --> 00:03:15,250
the closest distance, and there's, you have to

81
00:03:15,250 --> 00:03:17,870
find distances and the only way to do that is to consider all the distances.

82
00:03:17,870 --> 00:03:19,505
>> Yeah, at the very least the, the number of

83
00:03:19,505 --> 00:03:22,510
inputs that you need to even sniff at is quadratic.

84
00:03:22,510 --> 00:03:22,885
>> Right.

85
00:03:22,885 --> 00:03:23,800
>> Because the d can

86
00:03:23,800 --> 00:03:25,800
be any kind of structure. So, yeah, okay.

87
00:03:25,800 --> 00:03:27,800
So this is really the only answer that,

88
00:03:27,800 --> 00:03:32,880
that is even close. But I think it could come down a little bit from n cubed.

89
00:03:32,880 --> 00:03:35,350
>> Oh. I'm sure it could. I mean, because I just came

90
00:03:35,350 --> 00:03:38,940
up with the silliest, the, the simplest algorithm that you could think

91
00:03:38,940 --> 00:03:42,840
of that wasn't absolutely stupid. So I think that would. You could

92
00:03:42,840 --> 00:03:45,750
certainly do better than n cubed. But not much better than n cubed.

93
00:03:45,750 --> 00:03:47,130
>> All right. End of quiz.

94
00:03:47,130 --> 00:03:48,080
>> Yay.

